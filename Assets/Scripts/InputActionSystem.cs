//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/InputActionSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionSystem"",
    ""maps"": [
        {
            ""name"": ""Child"",
            ""id"": ""ceacacf9-6d79-42a5-adcf-c3b3961da921"",
            ""actions"": [
                {
                    ""name"": ""ClickMove"",
                    ""type"": ""Value"",
                    ""id"": ""f9bcd4df-e411-4e6b-91b4-bb305aeb340e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""4b1c21fa-75e7-408a-8e33-cf7970317668"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""835ee71c-9aff-4819-ae7c-b3c76a63e6e3"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3069e205-585f-4499-b2dd-49d052e00091"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Controls"",
            ""id"": ""7f0b1131-fbb2-46f5-aecc-49a828a5d513"",
            ""actions"": [
                {
                    ""name"": ""ExitGame"",
                    ""type"": ""Button"",
                    ""id"": ""8668a55a-5d4f-4f3e-a417-b6aa073c3c49"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eef52ccb-e2de-4a1b-a8e2-e680bda30174"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Child
        m_Child = asset.FindActionMap("Child", throwIfNotFound: true);
        m_Child_ClickMove = m_Child.FindAction("ClickMove", throwIfNotFound: true);
        m_Child_Click = m_Child.FindAction("Click", throwIfNotFound: true);
        // Controls
        m_Controls = asset.FindActionMap("Controls", throwIfNotFound: true);
        m_Controls_ExitGame = m_Controls.FindAction("ExitGame", throwIfNotFound: true);
    }

    ~@InputActionSystem()
    {
        UnityEngine.Debug.Assert(!m_Child.enabled, "This will cause a leak and performance issues, InputActionSystem.Child.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Controls.enabled, "This will cause a leak and performance issues, InputActionSystem.Controls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Child
    private readonly InputActionMap m_Child;
    private List<IChildActions> m_ChildActionsCallbackInterfaces = new List<IChildActions>();
    private readonly InputAction m_Child_ClickMove;
    private readonly InputAction m_Child_Click;
    public struct ChildActions
    {
        private @InputActionSystem m_Wrapper;
        public ChildActions(@InputActionSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @ClickMove => m_Wrapper.m_Child_ClickMove;
        public InputAction @Click => m_Wrapper.m_Child_Click;
        public InputActionMap Get() { return m_Wrapper.m_Child; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChildActions set) { return set.Get(); }
        public void AddCallbacks(IChildActions instance)
        {
            if (instance == null || m_Wrapper.m_ChildActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChildActionsCallbackInterfaces.Add(instance);
            @ClickMove.started += instance.OnClickMove;
            @ClickMove.performed += instance.OnClickMove;
            @ClickMove.canceled += instance.OnClickMove;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(IChildActions instance)
        {
            @ClickMove.started -= instance.OnClickMove;
            @ClickMove.performed -= instance.OnClickMove;
            @ClickMove.canceled -= instance.OnClickMove;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(IChildActions instance)
        {
            if (m_Wrapper.m_ChildActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IChildActions instance)
        {
            foreach (var item in m_Wrapper.m_ChildActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChildActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ChildActions @Child => new ChildActions(this);

    // Controls
    private readonly InputActionMap m_Controls;
    private List<IControlsActions> m_ControlsActionsCallbackInterfaces = new List<IControlsActions>();
    private readonly InputAction m_Controls_ExitGame;
    public struct ControlsActions
    {
        private @InputActionSystem m_Wrapper;
        public ControlsActions(@InputActionSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @ExitGame => m_Wrapper.m_Controls_ExitGame;
        public InputActionMap Get() { return m_Wrapper.m_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
        public void AddCallbacks(IControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Add(instance);
            @ExitGame.started += instance.OnExitGame;
            @ExitGame.performed += instance.OnExitGame;
            @ExitGame.canceled += instance.OnExitGame;
        }

        private void UnregisterCallbacks(IControlsActions instance)
        {
            @ExitGame.started -= instance.OnExitGame;
            @ExitGame.performed -= instance.OnExitGame;
            @ExitGame.canceled -= instance.OnExitGame;
        }

        public void RemoveCallbacks(IControlsActions instance)
        {
            if (m_Wrapper.m_ControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlsActions @Controls => new ControlsActions(this);
    public interface IChildActions
    {
        void OnClickMove(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
    public interface IControlsActions
    {
        void OnExitGame(InputAction.CallbackContext context);
    }
}
